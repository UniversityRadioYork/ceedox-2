{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to Ceedox 2, the URY internal documentation wiki for technical teams.</p> <p>This is not to be confused with Team Wiki, which is the general-purpose open-access wiki for use throughout URY.</p> <p>Note</p> <p>Do not put any sensitive information on Ceedox, as it is publicly available. Passwords should be on Vault, anything else sensitive should be either on Netbox or the team Google Drive.</p>"},{"location":"#misc-pages","title":"Misc Pages","text":"<ul> <li>Acceptable Use Policy</li> </ul>"},{"location":"#computing-team","title":"Computing Team","text":"<p>Welcome to the Computing Team home on Ceedox. Here you can find all of our mostly up to date documentation.</p> Link Description Passwords A link to our Vaultwarden instance where we store our passwords Infrastructure A link to our Netbox instance which we use to document our infrastructure Basics New members should probably read through this. How to develop with URY's build tools, passwords, etc. Important Things Everyone should look at these. Transmission Chain Documentation on how our transmission chain works Contingencies Contingency Plans for if any of our servers X-Plode Guides Miscellaneous guides for setting up things around URY"},{"location":"computing/basics/","title":"Basics","text":"<p>This part of our wiki contains everything a new Computing Team member should want to know about how to get started.</p> Location Description Software Development Details of our version control systems etc. WWW Access Surfing internal Web pages from off-campus. SSH Access Getting a remote shell on our machines. VPN Access Using the university Virtual Private Network. Email Access Setting up your email client for URY email. Passwords Every password you'll need for URY."},{"location":"computing/basics/emails/","title":"Email Access","text":""},{"location":"computing/basics/emails/#imap","title":"IMAP","text":"Connection type Secure IMAP Server ury.york.ac.uk Port 993 Username <code>&lt;your server user&gt;</code> Security SSL/TLS"},{"location":"computing/basics/emails/#smtp","title":"SMTP","text":"<p>NOTE: This no longer works off campus after ITS disabled off-campus authenticated SMTP. Your best bet for sending emails off campus is to use the webmail offerings of squirrelmail or roundcube</p> Connection type Secure SMTP Server ury.york.ac.uk Port 465 Username <code>&lt;your ury user&gt;</code> Security TLS"},{"location":"computing/basics/software-dev/","title":"Software Development","text":"<p>This page offers a rapid tour of URY's software development resources.</p>"},{"location":"computing/basics/software-dev/#acquiring-ury-source-code","title":"Acquiring URY source code","text":"<p>At time of writing, nearly all of URY's development is done on computing:software:external:GitHub: see that article for more information.</p> <p>GitHub uses Git as its version control system. Git is simple, which makes it both really nice to use and also really horrific with its learning curve. Reading the enclosed instruction book is recommended.</p>"},{"location":"computing/basics/software-dev/#acquiring-older-ury-source-code","title":"Acquiring older URY source code","text":"<p>Some of URY's older source may not be available on GitHub. Before we used GitHub, we used:</p> <ul> <li> <p>A Git server on urybsod;</p> </li> <li> <p>A SVN server on uryfs1;</p> </li> <li> <p>A CVS server on ury.</p> </li> </ul> <p>Most of these are now decommissioned, though backups may still exist. (Some of the old CVS root is now on GitHub as the private repository cvs-ury).</p> <p>Old documentation about these VCSes follows.</p>"},{"location":"computing/basics/software-dev/#urybsod-git","title":"urybsod git","text":""},{"location":"computing/basics/software-dev/#prerequisite-knowledge","title":"Prerequisite knowledge","text":"<p>Use port forwarding using ssh tunnels or UNI VPN</p>"},{"location":"computing/basics/software-dev/#access","title":"Access","text":"<p>GIT repos are stored on urybsod:/home/git owned by the git user and group.\\</p>"},{"location":"computing/basics/software-dev/#how-to-do-stuff","title":"How to do stuff","text":"<p>Always use the git user for developmenting purposes.</p> <pre><code>git clone git@urybsod:somerepo.git\n</code></pre> <p>To commit changes to your local repository, first add any new files, then commit with a message:</p> <pre><code>git add [filename]\ngit commit -m \"Enter a nice pretty git message here\"\n</code></pre> <p>Once you are done working on whatever you're working on, you push changes back to the development server:</p> <pre><code>git push\n</code></pre> <p>It may argue with you about there being other changes - apparently other people can edit code too! To 'pull' changes by others:</p> <pre><code>git pull\n</code></pre> <p>That's it! One can now git. Once a push is made to many of our git repositories, an automated build process will be started by Jenkins. Once complete the built code can be pulled onto the live location.</p> <p>Remember to refresh your local copy with the latest from the remote repo (git pull or git fetch/git merge), and commit all your changes to it, or branch.</p>"},{"location":"computing/basics/software-dev/#software-specifics","title":"Software specifics","text":"<p>Certain bits of software, notably the  computing:software:Website  and  computing:software:external:Radioplayer , have more involved git workflows than the standard push-pull. Check their pages for more information.</p>"},{"location":"computing/basics/software-dev/#repos","title":"Repos","text":"repo Description Live Pull Locations NewBAPS.git The BAPS replacement - baps2-slut.git BAPS2 The replacement of the replacement of BAPS website.git Front website Deprecated software radioplayer.git Our URY version of Radioplayer Automagically by website.git SiS.git Studio Information System Deprecated software sis2.git SIS2 uryfs1:/usr/local/sis2 api.git URY API internals - myury.git MyURY - The Members Internal replacement ury:/usr/local/myury shibbobleh.git URY Single Sign-On Service ury:/usr/local/shibbobleh; uryfs1:/usr/local/shibbobleh; dog:/usr/local/dog timelord.git Studio Clock jukebox:/usr/local/timelord uryjukebox.git iTones Web Management (Not inc. jukebox server API) uryfs1:/usr/local/uryjukebox propget.git Command-line utilities for querying website properties Anywhere (separate install process) fpclient.git A FreeBSD port of https://github.com/lastfm/Fingerprinter/ with URY's API key. Required for MyURY/NIPSWeb. At time of writing the FreeBSD /usr/ports package has a sample API key hardcoded. Made &amp; installed on thunderhorn"},{"location":"computing/basics/software-dev/#svn","title":"SVN","text":"<p>SVN replaced CVS stored on uryfs1 at /var/svnury checkout using svn co svn+ssh://user@uryfs1.york.ac.uk:/var/svnury ury-svn</p>"},{"location":"computing/basics/software-dev/#cvs","title":"CVS","text":"<p>user must be in cvs group on ury.york.ac.uk export CVS_RSH=\"ssh\" cvs -d :ext:uryuser@ury.york.ac.uk/usr/home/cvsroot co urycvs/</p>"},{"location":"computing/basics/ssh/","title":"SSH Access","text":""},{"location":"computing/basics/ssh/#ssh-access","title":"SSH Access","text":"<p>Secure Shell, or SSH, is a secure way to remotely get shell (command-line) access to a server. We use it a lot in URY, so it's important that you're able to access URY servers using it.</p> <p>This might need some configuration, depending on whether or not you're trying to SSH into a server from a computer that's on the campus network, or one that's off it.</p>"},{"location":"computing/basics/ssh/#on-campus","title":"On Campus","text":"<p>If in the campus network, you should be able to SSH into ury.york.ac.uk, uryfs1.york.ac.uk, etc directly.</p>"},{"location":"computing/basics/ssh/#off-campus","title":"Off Campus","text":"<p>You can't SSH directly into URY from outside campus; what you need to do is tunnel through a campus machine you have access to. For computer science students, the Computer Science teaching server (csteach1.york.ac.uk) should work.</p> <p>The most preferable way to access is using the York SSH gateway (ssh.york.ac.uk) to use this you can ask IT Services to enable access for you, then use it to jump to internal servers. This gateway supports the use of key authentication, which no other Uni provided service does.</p> <p>For non computer science students then VPN access into the university will always work.</p>"},{"location":"computing/basics/ssh/#configuring-the-ssh-client","title":"Configuring the SSH Client","text":"<p>You can edit your ~/.ssh/config to easily add tunnels by using proxy connections:</p> <pre><code>Host *\n# use my local keys on remote machines\nForwardAgent yes\n# keep the connection alive for finicky servers, and kill it when the\n# connection has died\nServerAliveInterval 15\nServerAliveCountMax 3\n# allow local and proxy commands\nPermitLocalCommand yes\n\nHost ssh.york.ac.uk\nHostname ssh.york.ac.uk\nUser [itservicesuser]\n\nHost csteach csteach1\nHostname csteach1.york.ac.uk\nUser [itservicesuser]\n\nHost csteach0\nHostname csteach0.york.ac.uk\nProxyCommand ssh ssh.york.ac.uk -W %h:%p\nUser [itservicesuser]\n\nHost ury\nHostname ury.york.ac.uk\nProxyCommand ssh ssh.york.ac.uk -W %h:%p\nUser [uryserveruser]\n\nHost uryfw0\nHostname uryfw0.york.ac.uk\nLocalForward 3000 studio1:5900\nLocalForward 3001 studio1guest:5900\nLocalForward 3002 studio2:5900\nLocalForward 3003 studio2guest:5900\nLocalForward 3004 wallpc1:5900\nLocalForward 3005 wallpc2:5900\nLocalForward 3006 production:5900\nLocalForward 4001 studio1:3389\nLocalForward 4002 studio2:3389\nLocalForward 4004 wallpc1:3389\nLocalForward 4005 wallpc2:3389\nLocalForward 4006 production:3389\nLocalForward 5000 eccleston:80\nLocalForward 5001 tennant:80\nLocalForward 5002 smith:80\nLocalForward 20000 10.64.160.18:80\nLocalForward 20010 10.64.160.18:4321\nLocalForward 20001 10.64.160.19:80\nLocalForward 20011 10.64.160.19:4321\nLocalForward 20002 10.64.160.20:80\nLocalForward 20012 10.64.160.20:4321\nLocalForward 20003 10.64.160.21:80\nLocalForward 20013 10.64.160.21:4321\nLocalForward 20004 10.64.160.22:80\nLocalForward 20014 10.64.160.22:4321\nLocalForward 30000 10.64.160.14:80\nProxyCommand ssh ssh.york.ac.uk -W %h:%p\nUser [uryserveruser]\n\nHost urybsod\nHostname urybsod.york.ac.uk\nProxyCommand ssh ssh.york.ac.uk -W %h:%p\nUser [uryserveruser]\n\nHost uryrrod\nHostname uryrrod.york.ac.uk\nLocalForward 9002 localhost:3000\nLocalForward 3498 localhost:3498\nLocalForward 3499 localhost:3499\nLocalForward 3501 localhost:3501\nLocalForward 3502 localhost:3502\nLocalForward 3503 localhost:3503\nLocalForward 3504 localhost:3504\nLocalForward 3505 localhost:3505\nProxyCommand ssh ssh.york.ac.uk -W %h:%p\nUser [uryserveruser]\n\nHost urysteve\nHostname urysteve.ury.york.ac.uk\nProxyCommand ssh ssh.york.ac.uk -W %h:%p\nUser [uryserveruser]\n\nHost dolby\nHostname dolby.ury.york.ac.uk\nProxyCommand ssh ssh.york.ac.uk -W %h:%p\nUser [uryserveruser]\n\nHost studio1guest\nHostname studio1guest.york.ac.uk\nProxyCommand ssh uryfw0 -W %h:%p\nUser ury\n\nHost urybackup0\nHostname urybackup0.york.ac.uk\nProxyCommand ssh ssh.york.ac.uk -W %h:%p\nUser [uryserveruser]\n\nHost urystv\nHostname urystv.york.ac.uk\nProxyCommand ssh ssh.york.ac.uk -W %h:%p\nUser [uryserveruser]\n\nHost eccleston\nHostname eccleston.york.ac.uk\nProxyCommand ssh uryfw0.york.ac.uk -W %h:%p\nUser [uryserveruser]\n\nHost tennant\nHostname tennant.york.ac.uk\nProxyCommand ssh uryfw0.york.ac.uk -W %h:%p\nUser [uryserveruser]\n</code></pre>"},{"location":"computing/basics/ssh/#university-vpn","title":"University VPN","text":"<p>Alternatively you could use the university VPN.</p>"},{"location":"computing/basics/ssh/#ex-student","title":"Ex-Student","text":"<p>Prior to getting approval for direct external ssh access uryfw0 has been set up to create reverse tunnels using autossh. To use this you will need an external server to act as your jumpbox.</p> <ol> <li>On the jumpbox run ''useradd -m -s /bin/false autossh''</li> <li>On uryfw0 change user ''sudo su -s /bin/bash autossh''</li> <li>Generate yourself a key with ''ssh-keygen -f ~/.ssh/id_rsa-user'' ensure to change ''user'' to your username to not overwrite other people's keys.</li> <li>Copy the generated public key to your jumpbox in the file: ''/home/autossh/.ssh/authorized_keys''</li> <li>Add your jumpbox config to ''/home/autossh/.ssh/config'' using the below example.</li> <li>Add the connection line to ''/etc/networking/if-up.d/autossh'' to start up the tunnel upon network connection using the below example.</li> </ol> <p>Example host config: Host example HostName example.co.uk User autossh IdentityFile /home/autossh/.ssh/id_rsa-user RemoteForward 1350 localhost:22</p> <p>Example connection line: su -s /bin/sh autossh -c '/usr/bin/autossh -M 0 -f -NTq -F /home/autossh/.ssh/config example'</p> <p>Change ''example'' to match the host given in ''.ssh/config''.</p> <p>You can now use your jumpbox as the ProxyCommand in your ssh config. Simply change the ProxyCommand for uryfw0 to: ProxyCommand ssh example -W localhost:1350 And update the other hosts to use uryfw0 instead of ssh.york.ac.uk</p>"},{"location":"computing/basics/vpn/","title":"VPN Access","text":""},{"location":"computing/basics/vpn/#vpn-access","title":"VPN Access","text":"Protocol PPTP Address vpn.york.ac.uk Authentication MSCHAPv2 Encryption as many bit possible (128-bit works) Compression Any/all you like (BSD/Deflact/TCP header) Other PPP echo packets User/Pass University credentials <p>The Uni VPN service can be accessed via http://webvpn.york.ac.uk here you can log in, and set up Network Connect for your computer (On Mac you must use safari to download this).</p> <p>Once downloaded run Network Connect and sign in. All your internet connections will now pass through the VPN and act as if you are coming from york campus.</p> <p>SSH access is possible to study bedrooms, when connecting via the VPN. This is the only way to SSH into study bedrooms unless you are within the same subnet.</p>"},{"location":"computing/basics/www/","title":"WWW Access","text":"<p>Most of our Internet resources are available on http://ury.york.ac.uk, which is a publicly available server that you should have no problems getting to. In order to access Web resources on any other URY server, however, you might need to do something extra.</p>"},{"location":"computing/basics/www/#campus-restricted-servers","title":"Campus-Restricted Servers","text":"<p>See the server list for the current list of these.</p> <p>If you're connecting from the university campus network, you should have no problems getting to these. However, if you're off the University campus, you'll need to use one of these:</p>"},{"location":"computing/basics/www/#use-the-university-proxy-server","title":"Use the university proxy server","text":"<p>This is probably the easiest way to get access to campus-only Web servers. (It also lets you into things you'd normally need to be on campus for too, like getting free copies of academic papers!)</p> <p>Just set your proxy server in your Web browser configuration to ''http://wwwcache.york.ac.uk:8080'', and you should be able to get through. (This will work for both HTTP and HTTPS -- you'll need to set both of these proxies for full access to our stuff)</p> <p>wwwcache will ask you for a username and password: these are your Computing Services/main university details (NOT your Computer Science or URY details!)</p>"},{"location":"computing/basics/www/#run-a-web-browser-on-a-campus-machine","title":"Run a Web browser on a campus machine","text":"<p>For quick trips, you could always remotely run a Web browser. For example, it's possible to SSH into milan and run the lynx text browser (graphical browsers might be possible with X forwarding, but in the author's experience they're way too slow to be usable).</p>"},{"location":"computing/basics/www/#try-to-access-the-resource-from-a-public-machine","title":"Try to access the resource from a public machine","text":"<p>Some of our campus-only Web resources are actually available through the public Web servers, through the miracles of Web server proxying. For example, the development website (''urybsod, port 8000''') is available through http://ury.org.uk/dev.</p>"},{"location":"computing/basics/www/#ury-internal-servers","title":"URY Internal Servers","text":"<p>At the time of writing, there's nothing you should need to access through HTTP on our internal servers, but if you did need to, you'd have to use SSH or something to tunnel into them.</p>"},{"location":"computing/broadcast-chain/","title":"Broadcast Chain","text":"<p>This is where you will find info about the broadcast chain at URY, especially where it related to Computing. The line between Engineering and Computing is blury, so this guide should be useful to both teams.</p> <p>The section should give you at least a general jist of what is connected to what, with helpful information explaining why and where to look for more information/poking around. Hopefully it should be understandable to all</p> <p>In essence, URY has a hybrid digital-analogue broadcast chain. This is for legacy and convenience reasons, with more parts of the chain becoming digital over time.</p>"},{"location":"computing/broadcast-chain/dante/","title":"Dante","text":""},{"location":"computing/broadcast-chain/dante/#history","title":"History","text":"<p>As part of URY's Beat the Buzz campaign in the mid 2010's [LINK], URY was able to fund the switchover to digital for inter-room audio distribution.</p> <p>Prior to this, all audio was sent analogue via jack patch bays between the studios, hub, office and stores. These patches are still present for emergency and interesting use cases.</p> <p>[LINK to patch bay documentation]</p>"},{"location":"computing/broadcast-chain/dante/#network","title":"Network","text":"<p>The Dante network has been dedicated it's own IP subnet: <code>&lt;font 10ptfont-family:Arial;font-style:normal;/Arial;;inherit;;inherit&gt;</code>10.64.160.32/28. Sadly this has become rather full.<code>&lt;/font&gt;</code>\\ \\ See https://docs.google.com/spreadsheets/d/1OAW1tW4W6UxLUNeCQxNY3diVCfeS2Z3P#gid=1699373761 for a full spreadsheet of IP addresses to keep up to date (see the Rednet Tab)\\ \\ All devices need to be patched onto the VLAN on the main URY switch to function.</p> <p>Several PCs in the station have extra USB or PCIe network ports to be able to use Dante Controller to configure the Dante network, namely the Studio Guest PCs and the production PC (since they run windows at present).</p>"},{"location":"computing/broadcast-chain/dante/#devices","title":"Devices","text":"<p>You have several Dante devices at your disposal:</p> <ul> <li> <p>Focusrite Rednet 2 per studio</p> </li> <li> <p>Focusrite Rednet 3 in stores, used as an interface between computing virtual audio routing and hardware recorders/tuners</p> </li> <li> <p>Focusrite Rednet 4 (8 channel input stagebox) in a portable rack case.</p> </li> <li> <p>Focusrite Rednet AM2 (2 channel output) in the office for monitoring AM/FM/studio</p> </li> <li> <p>Yamaha 01V96VCM mixing desk with Dante expansion card.</p> </li> <li> <p>Behringer X32 Rack with X-Dante card</p> </li> <li> <p>Studios / Production PC with Dante Via [LINK TO LICENSES]</p> </li> <li> <p>[Unknown status] Ferrofish Verto 32 (replacement for Rednet 3 above)</p> </li> </ul>"},{"location":"computing/broadcast-chain/dante/#clocking-info","title":"Clocking Info","text":"<p>Because Dante sends audio digitally, all Dante devices on the network must share a syncronised clock to allow data to flow between them.</p> <p>Here are some facts to know about URY's specific setup:</p> <ul> <li> <p>All devices on the Dante network MUST operate on the same clock frequency and should all sync to a single master clock.</p> </li> <li> <p>The Yamaha 01V96VCM and Dante card only support 48KHz. This enforces that the Dante network as a whole must be 48KHz.</p> </li> <li> <p>The clock master should always be the Dante device in stores (Rednet 3) which connects to the Computing sound card/audio intereface (Focusrite Scarlett 18i20 version 1)</p> </li> <li> <p>The Dante device in stores (Rednet 3) should take it's clock source externally from either the ADAT or word clock (BNC connector) from the Computing audio interface.</p> </li> </ul> <p>Those last 2 points require some further explanation: \\ \\ Most Dante devices on the network input and output analogue signals. These are not referenced by the clock, signals coming in won't be <code>out of sync</code> with the clock of the Dante device. This makes them suitable for being clock slaves. \\ \\ This is in contrast to devices such as the Rednet 3 in stores. This device inputs and outputs ADAT digital signals over fibre-optic only. These signals are referenced to the Dante master clock, the other device (the Computing audio interface, a Scarlett 18i20) needs to send and recieve data syncronised to this same clock also, otherwise crackles, clicks and dropouts occur.</p> <p>The decision was made for the Scarlett to be the master clock source because this is synced to the software clock of the virtual audio processing [LINK to Jack/Liquidsoap info]. URY can operate a skeleton service without physical studios as long as the audio interface is connected to the audio server, without Dante. As such, the Scarlett clock is the most important and shouldn't be interfered with by Dante hardware issues/swaps.</p>"},{"location":"computing/broadcast-chain/hub/","title":"The Hub","text":"<p>The Hub (the cupboard behind the station front door) contains some useful pieces of the broadcast chain puzzle!</p>"},{"location":"computing/broadcast-chain/hub/#networking","title":"Networking","text":"<p>Everything that requires networking in the station and stores goes via The Hub. There are multiple switches here:\\ \\</p> <ul> <li> <p>URY's main switch, currently a 3COM 48 port unit. This has many VLANs accociated with different services, including a Dante VLAN/subnet. [LINK]</p> </li> <li> <p>A smaller 8-port overflow Dante switch.</p> </li> <li> <p>An ITS managed HP switch for our university/internet uplink. This is the one with the fibre going into it.</p> </li> </ul> <p>Each room / area of the station / stores is labeled in the patchbay at the bottom. Count from left to right to find the port you are after. All ports around the station are labled consistently (and in numerical order) with the labels here.</p> <p>One row of the patchbay is just a passthrough to other equipment in The Hub rack.</p>"},{"location":"computing/broadcast-chain/hub/#the-selector-hardware","title":"The Selector (Hardware)","text":"<p>This is a silver 2U rack box with 4 buttons and LEDs. The buttons represent Studio 1 (Red), 2 (Blue), 3 (Jukebox) and 4 (Outside Broadcast).</p> <p>This box actually supports 8 sources internally and is remote controlled via a 9 pin D-type serial port. Instructions on the protocol are printed inside the box.</p> <p>It connects to the selector buttons via the patch bay with Cat5 cables. WARNING: Be very careful, these are ~9v lines with custom pinouts, they are not ethernet friendly and should be very carefully patched.</p> <p>It also connects via serial (and a USB converter) to the \"Selector\" Raspberry Pi in the black rack unit named \"Galifrey\".</p> <p>This box is considered the primary device in the broadcast selection chain. If it is not connected, many software-controlled source selections will not work.</p> <p>[MORE INFO]</p>"},{"location":"computing/broadcast-chain/hub/#dante","title":"Dante","text":"<p>In the rack is a small POE (Power Over Ethernet) device called a Dante AVIO. This device provides two channels of digital audio as input (on one XLR connector) and two channels as output, using the AES3 digital audio format.</p> <p>This is used for:</p> <ul> <li> <p>2 channels of input from the Satelite reciever. Channel 1 is typically IRN 1 (Sky news radio, hourly news bulletins and random sports updates) and channel 2 is IRN 2, which carries live coverage from events. Usually IRN1 is duplicated across both channels sent to the studios, while they are available as separate feeds via online streams or custom Dante routing.</p> </li> <li> <p>2 channels output to the Blackmagic Design ATEM Television video mixer. This is typically \"selector\" output, the soonest audio tap after the virtual audio selector to reduce video delay required to sync audio and video [LINK TO VISUALISATION]. It could also be sent direct studio feeds, but this will encure significantly less delay, but won't change with selector output going to air.</p> </li> </ul>"},{"location":"computing/broadcast-chain/source-selection/","title":"Source Selection","text":"<p>URY's source selection system has changed a bit over the last 10 years or so, slowly being more computing-based.</p>"},{"location":"computing/broadcast-chain/source-selection/#the-selector","title":"The Selector","text":""},{"location":"computing/broadcast-chain/source-selection/#in-the-hub","title":"In the Hub","text":"<p>The physical selector was once the only part of the source selection system. Located in the Hub in magestic brushed silver is the 2009 iteration of the unit.</p> <p>It supports 8 sources. Originally these were physical inputs on the rear of the unit, but now lay unused. The box is now just a hardware controller for the Liquidsoap software stack.</p> <p>Also on the back are:</p> <ul> <li> <p>A serial DB9 (for the software control)</p> </li> <li> <p>2 RJ45 jacks for the studio selector controls in each studio</p> </li> <li> <p>A mains input</p> </li> </ul> <p>On the front:</p> <ul> <li> <p>A lock switch (Here / Studio options)</p> </li> <li> <p>3 buttons (select Studio 1 (red), Studio 2 (blue), Jukebox)</p> </li> <li> <p>(Unused) Headphone socket for listening.</p> </li> </ul> <p>The lock switch prevents the studios from being selected from inside the studios (Here mode), as an effort to prevent selections out of term time/OBIT. Historically the Chief Engineer would lock the selector during these times.</p> <p>The Firmware also allows for a software lock which takes precedence over the physical buttons. The firmware and serial comms guide is inside the box.</p>"},{"location":"computing/broadcast-chain/source-selection/#in-the-studios","title":"In the Studios","text":"<p>Inside each studio there are 3 buttons, again to select Studio 1 (red), Studio 2 (blue) and Jukebox. Other sources can be selected via MyRadio/SIS.</p> <p>Also, less apparent, is some further functionality, power detection. Inside the MattchBox of each studio is a relay which is powered by the studio switched power ring. This informs the selector that the studio is powered on.</p> <p>This means that the selector will disable switching to a studio that is powered off and will switch back to Jukebox (Source 3) if power is lost during a show.</p> <p>Lastly, the bulb power of the corresponding studio button will also illuminate the On Air lights on the hall door and in-studio stalk via a mains relay in a box near each studio door.</p> <p>[MORE TECH DETAILS ABOUT THE SELECTOR BUTTONS, MATT S has pinouts for the cat5 and voltages]</p>"},{"location":"computing/broadcast-chain/virtual-sources/","title":"Virtual Sources and Audio Routing","text":"<p>As mentioned previously, Liquidsoap is our main software that handles audio routing, selection and playout. The source code running on the audio server (currently Dolby) is here.</p> <p>Liquidsoap and other bits generate the following stereo sources:</p> <ul> <li> <p>Jukebox</p> </li> <li> <p>OB-Line (via Icecast)</p> </li> <li> <p>WebStudio (via ShittyServer)</p> </li> <li> <p>Auto news (a cron job that plays pre-mixed jingle, patches in IRN 1, selects next show source),</p> </li> <li> <p>Sine wave (of 1350 Hz of course)</p> </li> <li> <p>Off Air loop</p> </li> <li> <p>Campus playout (when it's alive)</p> </li> </ul> <p>Jackd is used as a intermediate routing layer. Each hardware input and output are there, as well as routes patching between different liquidsoap inputs and outputs.</p> <p>Liquidsoap lives in <code>/usr/local/etc/liquidsoap</code> on Dolby. The <code>scripts</code> directory has helpful scripts to start the entire virtual audio stack (<code>startAudio.sh</code>) and make various jack routing patches.</p> <p>You can see the virtual routing in jackConnect.sh.</p>"},{"location":"computing/broadcast-chain/virtual-sources/#hardware-interconnects","title":"Hardware Interconnects","text":"<p>Currently URY gets audio inputs from both digital and analogue sources via a Focusrite Scarlett 18i20 (gen 1). All inputs below are stereo pairs unless otherwise noted.</p>"},{"location":"computing/broadcast-chain/virtual-sources/#digital-inputs","title":"Digital Inputs","text":"<p>8 Channels via ADAT from Dante 2 more channels could be aquired via SPDIF</p> <ul> <li> <p>Studio Red</p> </li> <li> <p>Studio Blue</p> </li> <li> <p>Office (Yamaha Mixer)</p> </li> <li> <p>Satelite IRN 1 (Mono)</p> </li> <li> <p>Satelite IRN 2 (Mono)</p> </li> </ul>"},{"location":"computing/broadcast-chain/virtual-sources/#analogue-inputs","title":"Analogue Inputs","text":"<p>(Upto 8 channels)</p> <ul> <li> <p>AM Receiver (Stereo because reciever does have two outputs)</p> </li> <li> <p>FM Receiver</p> </li> <li> <p>TX Compressor Output (to live streams/FM)</p> </li> </ul>"},{"location":"computing/broadcast-chain/virtual-sources/#digital-outputs","title":"Digital Outputs","text":"<p>8 channels via ADAT to Dante 2 more channels could be aquired via SPDIF</p> <ul> <li> <p>Selector output (for studio \"Online\" monitoring)</p> </li> <li> <p>AM Receiver passthrough (Mono, for studio \"AM\" monitoring)</p> </li> <li> <p>FM Receiver passthrough (Mono due to lack of channels, office monitoring)</p> </li> <li> <p>OB-Line</p> </li> <li> <p>Webstudio/autonews mixed</p> </li> </ul>"},{"location":"computing/broadcast-chain/virtual-sources/#analogue-outputs","title":"Analogue Outputs","text":"<p>(Upto 10 outputs)</p> <ul> <li> <p>Selector output (for Logging \"online\" and final TX compressor)</p> </li> <li> <p>AM TX output (2x mono downmix)</p> </li> <li> <p>Headphones for AM monitoring (Unconfirmed if still working)</p> </li> <li> <p>Headphones for FM monitoring (Unconfirmed if still working)</p> </li> </ul>"},{"location":"computing/broadcast-chain/virtual-switching/","title":"Virtual Switching","text":"<p>The real audio switching these days is done in Liquidsoap, a software-defined audio processing system. This is ultimately found in sel.liq.</p> <p>The process of switching at its most complicated is:</p> <ol> <li>A source is selected in MyRadio via SIS (Studio Information System) API Func</li> <li>MyRadio makes a Telnet connection with a command to Selector Listener, a piece of software running on a raspberry Pi connected to the serial of the physical Selector</li> <li>The physical selector makes a decision on if the current source is allowed to be selected (based on power and lock status) and selects it.</li> <li>SelectorListener writes a database record to record its change, this changes the MyRadio API/Timelord display etc (be careful to update the configuration if the database server is changed!)</li> <li>SelectorListener makes a Telnet connection to Liquidsoap to actually perform the source selection.</li> </ol> <p>Note that if you're selecting from the selector buttons, step 1 and 2 are skipped. Also note that this therefore means that the physical selector is considered the master of the selector output, so things get very borked / unresponsive if it's not present.</p> <p>At a pinch, you can telnet liquidsoap directly and force a switch.</p> <p>One last note is that if Liquidsoap is restarted, it will switch to a default source (typically Off-Air). The MyRadio API will likely be incorrectly reporting the selector state until the physical selector is told to change to the same source that liquidsoap is outputing, before selecting back to whatever source is required.</p>"},{"location":"computing/contingencies/","title":"Contingiencies","text":"<p>i.e. What would break if Server X were to X-plode? Along with how to fix it, hopefully</p> <p>Failures that can cause DEAD AIR are in bold.</p> <p>See also the server tier list (by broadcast-critical-ness):</p>"},{"location":"computing/contingencies/#servers","title":"Servers","text":"<ul> <li>Dolby</li> <li>Thunderhorn</li> <li>Steve</li> <li>Loggers</li> <li>Firewall 0</li> </ul>"},{"location":"computing/contingencies/dolby/","title":"Dolby","text":"<ul> <li> <p>IF IT SHITS ITSELF YOU WILL GO TO DEAD AIR WITHOUT ANY WARNING! (except Xymon)</p> <ul> <li> <p>Panic.</p> </li> <li> <p>Get back on air. Somehow. Do a TX OB if you need to.</p> </li> </ul> </li> <li> <p>Liquidsoap</p> <ul> <li> <p>Choose a box to temporarily host all URY audio - preferably a Debian box because setting up liquidsoap on a FreeBSD is all the pain. I recommend Steve.</p> </li> <li> <p>You will need the music store mounted at /music, if you\u2019re using Steve this isn\u2019t a problem because it is the musicstore</p> </li> <li> <p>Physically move the sound card USB to it, shouldn\u2019t need any drivers</p> </li> <li> <p>Install Liquidsoap from OPAM (already installed on Steve) and JACK (might already be installed on Steve)</p> </li> <li> <p>Git clone https://github.com/UniversityRadioYork/jukebox.git</p> </li> <li> <p>Edit the template config files - you can probably skip the Icecast parts until you\u2019re back on air on AM, it\u2019s more important (although you will need to comment out the appropriate lines in the liquidsoap files otherwise it will refuse to run)</p> </li> <li> <p>You may need to edit jackConnect with the appropriate device names</p> </li> <li> <p><code>cd scripts &amp;&amp; sudo ./startAudio.sh</code></p> </li> </ul> </li> <li> <p>SelectorListener</p> <ul> <li>TODO</li> </ul> </li> <li>Icecast<ul> <li>TODO</li> </ul> </li> </ul>"},{"location":"computing/contingencies/fw0/","title":"Uryfw0","text":"<p>Hope you like working on servers from a physical console in the server closet. \\  \\ Either of the network switches \\ Call Gavin, ITS have cold-spares for this sort of thing, and the on duty engineer will be able to get a network connection running.</p>"},{"location":"computing/contingencies/loggers/","title":"The Loggers (uryred / uryblue)","text":"<p>IF BOTH LOGGERS ARE DOWN, STOP BROADCASTING IMMEDIATELY!</p> <p>You can still operate with only one operable logger, but this is clearly unsustainable and reestablishing it should be a matter of urgency.</p> <p>Also, God help you.</p> <ul> <li>As a temporary backup log, run: <code>wget -O online.mp3 https://audio.ury.org.uk/live-high</code></li> </ul>"},{"location":"computing/contingencies/steve/","title":"Steve","text":"<ul> <li>Minecraft<ul> <li>Who gives a fuck</li> </ul> </li> <li>File shares<ul> <li>DEAD AIR since Jukebox has nothing to play (and neither does BAPS)</li> <li>Replicated hourly to urybackup0</li> <li>Samba and NFS will probably already be installed from when it was replaced by Steve (lol), although chances are they may be quite outdated</li> <li>Go into Wogan and change the DNS records for musicstore and filestore to point to backup0 - this should cover BAPS, if it doesn\u2019t, <code>ipconfig /flushdns</code> and a server restart</li> <li>Some servers (namely Thunderhorn and Dolby) don\u2019t use AD for DNS and so have it mounted by IP address in fstab, change that</li> </ul> </li> <li>Campus Playout Liquidsoap<ul> <li>The script is in GitHub, copy it to another box with Liquidsoap - Dolby will do in a pinch</li> <li>Also copy and edit the sample configs for each of the instances</li> <li>Note that the music store is expected to be mounted on /music - if you\u2019re moving it to Dolby this should be all set up, for another box you may need to mount backup0</li> </ul> </li> <li>Postgres<ul> <li>Fix: hot standby on urybackup0, <code>pg_ctl promote -D /pool0/backup/backup0-postgres</code> should make it the primary</li> <li>Note: THIS WILL MAKE IT THE PRIMARY, MAKE SURE NO WRITES GO TO STEVE OR YOU WILL HAVE SPLIT-BRAIN!!! When you fix/replace steve as the primary, do a full replication to it from bup0 before promoting it</li> <li>Things that need updating for the new SQL server:<ul> <li>DNS (on uryfw0 and Wogan) - Should take care of Thunderhorn, Jukebox and BAPS.</li> <li>SelectorListener - Should be done by DNS but it didn\u2019t last time</li> <li>Thunderhorn<ul> <li>MyRadio - /usr/local/www/myradio/src/MyRadio_Config.local.php</li> <li>Campus Playout - /usr/local/www/campus-playout-server(-dev)/config.toml</li> </ul> </li> <li>Jukebox (formerly Dolby rip)</li> <li>All the BAPSes</li> </ul> </li> </ul> </li> </ul>"},{"location":"computing/contingencies/thunderhorn/","title":"Thunderhorn","text":"<ul> <li>Web<ul> <li>This means more than you think.<ul> <li>Obviously, the website and MyRadio are le rip</li> <li>Jukebox will break because it relies on the MyRadio API - POTENTIAL DEAD AIR</li> <li>Campus Playout will break because it relies on its own internal API</li> <li>Timelord too</li> <li>Wiki and Ceedox\u2026 poof<ul> <li>Including the passwords you need for when ceedox is down</li> <li>Thank God for backups.<ul> <li>If you need them, they\u2019re on urybackup0 at <code>/pool0/backup/ury/usr/local/www/dokuwiki/data/pages/computing/restricted_passwords.txt</code></li> </ul> </li> </ul> </li> </ul> </li> <li>Pick a box, any box<ul> <li>If possible, set it to use IP 144.32.64.162, otherwise you\u2019ll need to reconfigure the DNS as well</li> </ul> </li> <li>Install nginx and PHP-FPM</li> <li>MyRadio<ul> <li>There should be a backup on backup0:/pool0/backup/ury/usr/local/www/myradio</li> <li>Alternatively, git clone it and edit src/MyRadio_Config.local.php, it\u2019s reasonably documented</li> <li>Find the nginx configs on bup0, or failing that, bodge together some nginx config from Google tutorials to serve PHP from src/Public</li> </ul> </li> <li>2016-site<ul> <li>Ditto for backups</li> <li>Failing that, git clone, go build (or scp up the binary and assets), and set up a config.toml and .myradio.key</li> <li>There\u2019s a sample FreeBSD rc script for daemonizing it on GitHub, if you\u2019re using another OS/init system adapt it - it\u2019s a simple HTTP server that listens on a port, so set up a nginx proxy to it and you should be gucci</li> </ul> </li> <li>Campus Playout<ul> <li>Ditto. It\u2019s built in essentially the same way as 2016-site so you might be able to get away with config copy-pastes</li> <li>The only exception being the static client assets, which are not served by the server but rather by nginx directly - use a location block with<code>alias /usr/local/www/campus-playout-client;</code></li> </ul> </li> <li>Various things that nginx reverse proxies<ul> <li>If you\u2019re lucky the nginx config will be backed up on backup0. If not, God help you.</li> </ul> </li> </ul> </li> <li>Email<ul> <li>God help you.</li> <li>Copy the appropriate /etc folders from the backup on backup0 onto rrod (or another suitable server)</li> <li>Install the appropriate package list (via poudriere, <code>urystv$ grep mail /usr/local/poutriere/amd*/ury*.list</code>)</li> <li>Regenerate the users and mailboxes (<code>mailBoxGen.sh</code>)</li> <li>Ask ITS to switch the SMTP to the donor box</li> </ul> </li> </ul>"},{"location":"computing/guides/","title":"Guides","text":"<p>Miscellaneous guides for computing related things</p>"},{"location":"computing/guides/cold-start/","title":"Cold Starting URY\u2019s Servers","text":"<p>Occasionally, it is necessary to start up all of the servers, at the same time. This is usually after a power cut.</p> <p>If possible (read: if the UPS actually works), it is best to shut down the servers during a power outage to prevent any corruption of data.</p> <p>This document assumes that URY is not a smoking crater, and that the FM transmitter is still powered on (it should be, the Pi is powered by a USB battery pack).</p>"},{"location":"computing/guides/cold-start/#order-of-starting","title":"Order of starting","text":"<p>Regardless of if the servers how the servers are powered off, the following order should be followed for booting them back up</p> <ol> <li>uryfw0 - critical to allow for off-site assistance via ssh</li> <li>stratfordbackup0</li> <li>steve</li> <li>ury (Thunderhorn)</li> <li>Logger Red</li> <li>Logger Blue</li> <li>Selector Pi</li> <li>dolby</li> <li>evergiven bsod - Get Xymon back up, it make life so much easier</li> </ol> <p>N.B. Some servers may have started themselves after a power cut. Login to each server in the above order to get each one working.</p> <p>Please ensure each server has finished starting before beginning the next one, or at least, that all of the services or mounts required by other servers have been dealt with.</p>"},{"location":"computing/guides/cold-start/#rational-behind-the-boot-order","title":"Rational behind the boot order:","text":"<p>The order recommended above is most likely the quickest way to get all of the servers up and running again, and is based on the dependencies that servers have.</p> <p>Practically all of them mount stratford backup0, so there is little point in having ury, bsod or dolby up without it. We also need at least one logger up before we start broadcasting again.</p> <p>Jukebox (on dolby) and BAPS (in the studios) require Steve\u2019s filestore, so there is no point having Dolby up without Steve (we might as well rely on silencio until we have Jukebox).</p> <p>Broadcasting before all of the servers are restarted is probably a bad idea (other than bsod, though that does make monitoring difficult).</p>"},{"location":"computing/guides/cold-start/#notes-on-starting-the-servers","title":"Notes on starting the servers","text":"<p>All of the servers have the same root user password. This password will be available in a lockbox in the tx cupboard, as it is required if one of the servers boots into single user mode.</p>"},{"location":"computing/guides/cold-start/#uryfw0","title":"uryfw0","text":"<p>Firewall0 is our main way of connecting to the outside world. Boot it first in order to allow the rest of the Computing Team to access the rest of the network. It is one of the servers that seems to start itself, and actually does start, rather than hanging because it has either a corrupt drive or is missing a connection to another server.</p> <p>\\ However, upon booting the server, immediately run:</p> <pre><code>sudo /usr/local/fw0wall/fw0wall\n</code></pre> <p>This command actually runs the firewall. It is usually a good idea to stop anyone having access to absolutely everything (apparently).</p>"},{"location":"computing/guides/cold-start/#stratford","title":"Stratford","text":"<p>Stratford is our backup server and should start up relatively painlessly. It\u2019s possible the pools don\u2019t mount automatically on startup. To remedy this you can run the following as root: \\  \\ <code>zpool import filestore</code></p> <pre><code>zpool import musicstore\nzpool import backup\n</code></pre>"},{"location":"computing/guides/cold-start/#steve","title":"Steve","text":"<p>Make sure the database is running after booting steve. Its a postgres database. It was working for me so idk the command to start it if it isn\u2019t.</p>"},{"location":"computing/guides/cold-start/#thunderhorn","title":"Thunderhorn","text":"<p>Freebsd the shit needs to mount everything on boot, like the musicstore from Steve.</p> <p>Bonus fun facts: it was shitting cos we yeeted autoviz so sbeve wouldn't start nfs so blundershorn wouldn't mount the musicstore and some bollocks mount from dolby. The shit.</p>"},{"location":"computing/guides/cold-start/#loggers","title":"Loggers","text":"<p>service start loggerng</p> <p>Check in /home/logger/logs/continuous on red and /logs/continuous in blue that it's actually making them</p>"},{"location":"computing/guides/cold-start/#dolby","title":"Dolby","text":"<p>/usr/local/etc/liquidsoap/scripts</p> <p>startaudio.sh</p>"},{"location":"computing/guides/cold-start/#selector-pi-tbf-this-should-be-before-dolby","title":"Selector pi (tbf, this should be before dolby)","text":"<p>Oh it just didn't turn on. Off and on the power, startselctor.sh</p>"},{"location":"computing/guides/cold-start/#working-on-it","title":"Working on it","text":""},{"location":"computing/guides/cold-start/#studios","title":"Studios","text":"<p>Check all channels to desk work</p> <p>Check baps works</p>"},{"location":"computing/guides/cold-start/#switching-fm","title":"Switching FM","text":"<ul> <li>ssh to the fm transmitter</li> <li>screen -ls</li> <li>screen -r pid</li> <li>Close running program</li> <li>./fm_test or recv</li> <li>Ctl a, d</li> </ul>"},{"location":"computing/guides/pipewire-setup/","title":"Pipewire Setup","text":""},{"location":"computing/guides/pipewire-setup/#or-how-studio-pc-pipewire-works","title":"Or: How Studio PC Pipewire works","text":""},{"location":"computing/guides/pipewire-setup/#alternatively-linux-audio-is-a-mess","title":"Alternatively, linux audio is a mess","text":"<p>PulseAudio in studio blue had a Moment\u2122 (it was getting SIGKILLed at startup, launching with -v made it still fail with no useful info -vv made it suddenly start working again), so we decided to finally test moving to pipewire</p>"},{"location":"computing/guides/pipewire-setup/#installing-pipewirewireplumber-copy-pasted-from-korys-bash-history-on-the-computing-account","title":"Installing pipewire+wireplumber (copy-pasted from kory\u2019s bash history on the computing account)","text":"<pre><code>sudo add-apt-repository ppa:pipewire-debian/pipewire-upstream\nsudo add-apt-repository ppa:pipewire-debian/wireplumber-upstream\nsudo apt install gstreamer1.0-pipewire libpipewire-0.3-{0,dev,modules} libspa-0.2-{bluetooth,dev,jack,modules} pipewire{,-{audio-client-libraries,pulse,bin,jack,alsa,v4l2,libcamera,locales,tests}}\nsudo apt-get install libpipewire-module-x11-bell\nsudo apt-get install wireplumber{,-doc} gir1.2-wp-0.4 libwireplumber-0.4-{0,dev}\nsystemctl --user --now disable pulseaudio.{socket,service}\nsystemctl --user mask pulseaudio\nsystemctl --user --now disable pulseaudio.{socket,service}\nsystemctl --user mask pulseaudio\nsystemctl --now disable pulseaudio.{socket,service}\n</code></pre> <p>(Alternatively, the guide I followed: https://pipewire-debian.github.io/pipewire-debian/)</p> <p>PipeWire initialisation is handled by the script <code>/usr/local/bin/ury-pipewire.sh</code>, which is run by the ury-pipewire systemd user service (<code>/usr/lib/systemd/user/ury-pipewire.service</code>). BAPS depends on <code>pipewire+pipewire-pulse</code>, <code>ury-pipewire</code> depends on <code>pipewire+pipewire-pulse+wireplumber</code> and is set to run before BAPS. ury-pipewire can probably be replaced by either a pipewire or wireplumber config, I just need to get round to it.</p>"},{"location":"computing/guides/pipewire-setup/#current-systemd-service-dependencies","title":"Current systemd service dependencies:","text":"<p> Colour legend: Black = Requires Dark blue = Requisite Dark grey = Wants Red = Conflicts Green = After</p>"},{"location":"computing/important/","title":"Important Things","text":"<p>This bit of the wiki contains all the things you really, really, really should read.</p> <p>Words cannot stress how important it is that everyone familiarise themselves with at least the existence of the content in this section, especially legal obligations.</p> Link Description Induction New members should look through this! Legal Obligations Things we have to do by law."},{"location":"computing/important/graceful/","title":"Being Graceful","text":"<p>This page lists several ways of doing things gracefully - that is, doing things in such a way that disruption to listeners, presenters and officers is as minimal as possible (Not, doing things like Michael Grace).</p>"},{"location":"computing/important/graceful/#timing-your-breakages","title":"Timing your breakages","text":"<p>When about to do something that might break things (for example: website builds, website updates, configuration changes), try to time them so that they occur during a URY Jukebox slot. This way, at worst you won't have a presenter on your case when things keel over, and at best nobody will be listening when things go belly-up.</p> <p>An exception to this rule is maintenance to the Jukebox itself, or resolving an urgent security issue.</p>"},{"location":"computing/important/graceful/#shoop","title":"SHOOP","text":"<p>SHOOP, or System Hug/Official Outage Period, is what we call specially arranged time where we can break stuff/fix the servers (referred to lovingly as \"hugs\").</p> <p>It's always best to request SHOOP from the Programme Controller (see below) if you need it. We're trying to get some form of official SHOOP system going, but this is bound to be contentious.</p>"},{"location":"computing/important/graceful/#letting-the-programme-controller-know","title":"Letting the Programme Controller know","text":"<p>If you need to take a show or set of shows off-air, then try to let the Programme Controller know 72 hours in advance so they can OK it and give the presenters 48 hours notice.</p>"},{"location":"computing/important/graceful/#reloading-the-web-server","title":"Reloading the web server","text":"<p>Always try ''apache2ctl graceful'' before resorting to ''apache2ctl restart'', for things such as reloading config files.</p>"},{"location":"computing/important/graceful/#disabling-the-website","title":"Disabling the website","text":"<p>Sometimes there comes a time when you'll have to close the website off completely. In this case, unless you really need to pull the web server down, the graceful approach is to switch the website over to disabled mode.</p> <p>If you're doing anything that'll take the databases down (for example, upgrades on URYFS1), you'll need to disable the website. This is because the website uses the databases a lot, and will keel over without them.</p> <p>Website disables are done by setting the disabled-reason website property. IMPORTANT: If you're taking the database down, you //MUST// set disabled-reason via a property override (details on how to do this are in the properties wiki page)!</p>"},{"location":"computing/important/induction/","title":"Computing Team Induction","text":"<p>Welcome to URY Computing Team! We hope that your stay here is a fun, productive and--dare we say--//educational// one!</p> <p>This page is basically a checklist/rundown of all the things that need to be done before you're a fully fledged, ready-to-go computing type person. Some of it is stuff we need to do, and hopefully by the time you get to read this it should have been done for you, but you'll have to do a bit of it too.</p>"},{"location":"computing/important/induction/#new-user-account","title":"New user account","text":"<p>Firstly, you'll need a user account for every computer you'll need to touch. We'll set these up for you.</p>"},{"location":"computing/important/induction/#development-server-password","title":"Development server password","text":"<p>Secondly, in order to access our Web resources (the bug tracker, development website, continuous integration/build server, etc etc yadda), we'll need a username and password from you. (This is separate from the new user account).</p>"},{"location":"computing/important/induction/#reading-list","title":"Reading list","text":"<p>Yes, we know you want to get stuck in immediately. But, before you do anything, we really do recommend that you at least acknowledge the bits of the Computing wiki labelled Important Things and Computing Team Basics, especially the important stuff. Something in there could save your life.</p>"},{"location":"computing/important/legal/","title":"Legal Obligations","text":"<p>These, unfortunately, are not negotiable, and we need to do them.</p>"},{"location":"computing/important/legal/#stop-you-violated-the-law","title":"Stop! You Violated The Law","text":"<p>Obviously, don't do anything that's outright, obviously illegal. URY could get in serious trouble, and none of us want that to happen. You could get in serious trouble, and we hate to lose a team member.</p> <p>Some examples of what not to do:</p> <ul> <li> <p>Store publicly viewable copyrighted material on URY servers</p> </li> <li> <p>Put illegal content like child pornography on URY servers, even if it isn't publicly viewable</p> </li> <li> <p>Crack into someone else's computer systems from a URY computer</p> </li> <li> <p>Put publicly viewable blatantly libellous/defamatory content on URY servers</p> </li> <li> <p>Store more personal information than is really necessary on URY computers</p> </li> </ul>"},{"location":"computing/important/legal/#ofcom","title":"Ofcom","text":"<p>Ofcom requires us to keep a 42-days audiolog of the station's output. This means that there must always be at least one 42-day logger running.</p>"},{"location":"computing/important/legal/#ppl-licence","title":"PPL Licence","text":"<p>From time to time you'll need to get figures to back up our PPL licencing requirements.</p> <p>These run over four quarters:</p> <ol> <li>1st January to 1st April</li> <li>1st April to 1st July</li> <li>1st July to 1st October</li> <li>1st October to 1st January</li> </ol> <p>The first date is inclusive (date &gt;= this) and the second date is exclusive (date &lt; this).</p>"},{"location":"computing/important/legal/#todo","title":"TODO","text":"<p>Make a nice frontend for doing this.</p>"},{"location":"computing/important/legal/#webcast-and-territory-report","title":"Webcast and territory report","text":""},{"location":"computing/important/legal/#the-new-fancy-way","title":"The New Fancy Way","text":"<p>One of the quarterly requirements is a quarterly webcast and territory report. This is a single spreadsheet and combines</p> <ul> <li> <p>Track listener hours (Number of tracks played per hour we are broadcasting)</p> </li> <li> <p>Percentage of listeners from each country listed</p> </li> <li> <p>Total hours of listening</p> </li> </ul> <p>The data for the territory and hours is stored into the database by Listenstats (the proxy sitting between nginx and Icecast).</p> <p>Run this query in psql on urysteve in membership database to calculate the total listen hours (substituting the relevant dates on the fourth line):</p> <pre><code>WITH valid_rows AS (\n    SELECT *\n    FROM listens.listen\n    WHERE (time_start&gt;= '2020-10-01' AND time_end &lt;= '2020-12-06')\n   AND time_end - time_start&gt; '30 seconds'\n    AND time_end - time_start &lt;'24 hours'\n)\nSELECT EXTRACT(EPOCH FROM SUM(time_end - time_start))/3600 AS hours\nFROM valid_rows;\n</code></pre> <p>And run this query to calculate listeners by territory, again substituting dates:</p> <pre><code>WITH valid_rows AS (\n    SELECT *\n    FROM listens.listen\n    WHERE (time_start&gt;= '2020-10-01' AND time_end &lt;= '2020-12-06')\n   AND time_end - time_start&gt; '30 seconds'\n    AND time_end - time_start &lt;'24 hours'\n), countries as (\n    SELECT geoip_country AS country\n    FROM valid_rows\n    WHERE geoip_country `&lt;&gt;` ''\n    AND (NOT ip_address  &lt;&lt;inet '10.240.0.0/16')\n    UNION ALL\n    SELECT 'GB' AS country\n    FROM valid_rows\n    WHERE ip_address  &lt;&lt;inet '10.240.0.0/16'\n)\nSELECT country, count(country), count(country)::decimal / (select count(*) from countries) * 100 as prop\nfrom countries\ngroup by country\norder by country;\n</code></pre> <p>Note: we make the assumption that anyone listening for less than 30 seconds, or more than 24 hours, is either channel-hopping without actually listening, or a bot scraping/relaying us, and thus discount them.</p> <p>These values then need transferring to the PPL spreadsheet (ask management to forward it from the quarterly request email). For each country in the PPL sheet, copy the corresponding value from the processed log data. Enter the total hours into the appropriate field. Check that the percentages tally to 100% to ensure that all the listener figures have been accounted for.</p> <p>Finally, we need 'total tracks per broadcast hour'. First the easy bit \u2013 broadcast hour. A broadcast hour is when we are actually broadcasting music, so term time. These usually conveniently fall within the respective quarters (Autumn usually straddles Q3 and Q4), but not always, so check the term dates and any 'special events' which were actually broadcast online. So, assuming a single term fits wholly within a quarter, 7 days _ 10 weeks _ 24 hours = 1680 hours.</p> <p>More tricky \u2013 the number of tracks played. If a full tracklist is requested, care must be taken to make sure the same data is used for both, and it is of course good practice to ensure this anyway. Use the MyRadio \"full tracklist\" option in the BAPS Statistics page to generate all the tracks played in a quarter (note \u2013 the date ranges are a pain in the arse. The best way is to use an unambiguous date range which can't be misinterpreted as either MMDDYY or DDMMYY). Download as a CSV (it should offer this option) and count the number of tracks in the quarter. Divide the number of tracks by the number of hours calculated above (it's usually around 12-18) and enter that.</p> <p>That should be it for the webcast and territory report!</p>"},{"location":"computing/important/legal/#the-old-boring-and-probably-broken-way","title":"The Old Boring (And Probably Broken) Way","text":"<p>The data for the territory and hours comes from the icecast logs (stored in ''/var/log/icecast on  at the time of writing). These are entered into the database through a script ''processlogs.php. This is quite arcane and fragile, most notably it isn't great at avoiding duplicate entries. So, it looks in a separate folder from where the logs are stored, currently ''/music/streamlogs/database/. Check in the database (''public.strm_log) to see when the last log entry was, and copy all ''access.log- timestamped files after this date (the timestamp is the last day of entry before the log rotated). Run ''php processlogs.php.</p> <p>Now the logs are in the database, we can get the data we need out of them. Another php script, currently at ''/usr/local/bin/streamstats.php generates this data. It requires ''psql and ''Geo-IP \u2013 which should be kept up to date with means of a cron job. Edit ''streamstats.php and set the date ranges in the SQL query to the appropriate quarter. Run the script and copy and paste the bottom of the output (hours and countries) into a spreadsheet, which should interpret it as tab separated values.</p> <p>These values then need transferring to the PPL spreadsheet (ask management to forward it from the quarterly request email). For each country in the PPL sheet, copy the corresponding value from the processed log data. Enter the total hours into the appropriate field. Check that the percentages tally to 100% to ensure that all the listener figures have been accounted for.</p> <p>Finally, we need 'total tracks per broadcast hour'. First the easy bit \u2013 broadcast hour. A broadcast hour is when we are actually broadcasting music, so term time. These usually conveniently fall within the respective quarters (Autumn usually straddles Q3 and Q4), but not always, so check the term dates and any 'special events' which were actually broadcast online. So, assuming a single term fits wholly within a quarter, 7 days _ 10 weeks _ 24 hours = 1680 hours.</p> <p>More tricky \u2013 the number of tracks played. If a full tracklist is requested, care must be taken to make sure the same data is used for both, and it is of course good practice to ensure this anyway. Use the MyRadio \"full tracklist\" option in the BAPS Statistics page to generate all the tracks played in a quarter (note \u2013 the date ranges are a pain in the arse. The best way is to use an unambiguous date range which can't be misinterpreted as either MMDDYY or DDMMYY). Download as a CSV (it should offer this option) and count the number of tracks in the quarter. Divide the number of tracks by the number of hours calculated above (it's usually around 12-18) and enter that.</p> <p>That should be it for the webcast and territory report!</p>"},{"location":"computing/important/legal/#full-tracklist-or-parts-thereof","title":"'Full Tracklist' or parts thereof","text":""},{"location":"computing/important/legal/#older-queries-that-need-sorting","title":"Older queries that need sorting","text":""},{"location":"computing/important/legal/#calculating-tracks-played-over-quarter","title":"Calculating Tracks Played Over Quarter","text":"<p>TODO: Validate this</p> <pre><code>:::plsql\nSELECT COUNT(*) FROM baps_audiolog\n     INNER JOIN baps_audio USING (audioid)\n     WHERE timeplayed &gt;= '2011-01-01' AND timestopped &lt; '2011-04-01'\n     AND (timestopped - timeplayed) &gt;= INTERVAL '1 minute'\n     AND (filename IS NULL OR\n          (filename NOT LIKE '%uryfs1%jingles%'\n           AND filename NOT LIKE '%uryfs1%adverts%'\n           AND filename NOT LIKE '%uryfs1%beds%'))\n</code></pre>"},{"location":"computing/important/legal/#calculating-hours-of-show-per-quarter","title":"Calculating Hours Of Show Per Quarter","text":"<p>TODO: Validate this.</p> <pre><code>:::plsql\nSELECT SUM(EXTRACT(EPOCH FROM (endtime - starttime)::INTERVAL))/3600\nFROM sis_sign\nINNER JOIN sched_timeslot USING (timeslotid)\nWHERE actiontime &gt;= '20XX-XX-01' AND actiontime &lt; '20XX-XX-01';\n</code></pre>"},{"location":"computing/important/legal/#calculating-listener-hours-per-quarter","title":"Calculating Listener-Hours Per Quarter","text":"<p>TODO: Validate this.</p> <pre><code>:::plsql\nSELECT SUM(EXTRACT(EPOCH FROM (endtime - starttime)::INTERVAL))/3600\nFROM strm_log\nWHERE starttime &gt;= '20XX-XX-01' AND endtime &lt; '20XX-XX-01'\nAND (endtime - starttime) &gt;= INTERVAL '1 minute'\n</code></pre>"},{"location":"computing/important/legal/#old-stuff-that-might-be-better-who-knows","title":"Old stuff that might be better, who knows","text":"<p>Some info needs to be put here</p> <p>V\u2014 This no longer works (strm_log.duration n'exist pas)</p> <p>You can use this SQL query to get the cumulative listener time for all the streams. Adjust the dates as needed.</p> <pre><code>:::plsql\nSELECT SUM(strm_log.duration)\nFROM strm_log INNER JOIN strm_stream USING (streamid)\nWHERE (streamname='/live-high'\nOR streamname='live-low'\nOR streamname = 'broadcast/live.rm'\nOR streamname='/live-high.ogg'\nOR streamname='/live-low.ogg')\nAND duration &gt; INTERVAL '10 seconds'\nAND starttime &gt; '$DATE1'\nAND starttime &lt; '$DATE2'\n\n\n\n:::plsql\nSELECT date_trunc('day', strm_log.starttime), SUM(strm_log.duration)\nFROM strm_log INNER JOIN strm_stream USING (streamid)\nWHERE (streamname='/live-high'\nOR streamname='live-low'\nOR streamname = 'broadcast/live.rm'\nOR streamname='/live-high.ogg'\nOR streamname='/live-low.ogg')\nAND starttime &gt; DATE '2008-01-01'\nAND duration &gt; INTERVAL '30 seconds'\nAND starttime &lt; DATE '2008-06-30'\nAND duration &lt; INTERVAL '24 hours'\nGROUP BY date_trunc\nORDER BY date_trunc\n</code></pre>"},{"location":"computing/transmission-chain/","title":"Transmission Chain","text":""},{"location":"computing/transmission-chain/#summary","title":"Summary","text":"<p>This is where you will find info about the Transmission Chain at URY, especially where it relates to Computing. The line between Engineering and Computing is blury, so this guide should be useful to both teams.</p> <p>The section should give you at least a general jist of what is connected to what, with helpful information explaining why and where to look for more information/poking around. Hopefully it should be understandable to all</p> <p>In essence, URY has a hybrid digital-analogue broadcast chain. This is for legacy and convenience reasons, with more parts of the chain becoming digital over time.</p>"},{"location":"computing/transmission-chain/#fm-and-dab","title":"FM and DAB","text":"<p>FM is an analogue system, where we\u2019re the only station on 88.3 MHz in this area (well, apart from when you pick up Radio 2). It varies the frequency (frequency modulation, aka FM) slightly off 88.3 to encode the audio wave into the signal.</p> <p>DAB is a digital system (Digital Audio Broadcasting), where us and other stations get combined together into a digital signal, and broadcast together. People then pick up that digital signal, and then you can listen to any of the stations on it. It\u2019s better quality audio, because it has error correction built into the digital signal, so the audio can be corrected post transmission. Although, on a technicality, there is a frequency for this signal, you don\u2019t find the frequency like you do on an analogue radio, your radio will scan all the DAB frequencies to see what stations it can find, then you\u2019re able to select one of those. For completists, the frequency of the York multiplex is Block 8B, or 197.648 MHz. Our audio is encoded in HE-AAC at 48 kb/s, which gives us a good quality stereo signal.</p>"},{"location":"computing/transmission-chain/common-tasks/","title":"Common Tasks","text":""},{"location":"computing/transmission-chain/common-tasks/#switching-tofrom-term-time-mode","title":"Switching To/From Term Time Mode","text":"<p>On dolby, run fm jb to put jukebox on the FM feed. The auto-selector will deal with the news. When we go back, run fm pgm to put us back.</p> <p>This should also switch the DAB feed.</p>"},{"location":"computing/transmission-chain/common-tasks/#putting-fm-on-local-audio-loop-for-breaking-station-link","title":"Putting FM on Local Audio Loop for Breaking Station Link","text":"<p>On the library PC, open the screen session on the <code>ury</code> user, <code>screen -r</code>. Quit the running script. Then run <code>fm_test.sh</code> for the local audio loop, and <code>fm_recv.sh</code> for the station feed. When going back to the station feed, dolby may have killed it whilst it didn\u2019t have a receiver, so you\u2019ll have to sudo <code>systemctl restart fm_streamer</code> on dolby. If out of term time, also run a <code>fm pgm &amp;&amp; fm jb</code> to get everything to catch up.</p>"},{"location":"computing/transmission-chain/common-tasks/#restarting-the-station-transmitter-link","title":"Restarting the Station -&gt; Transmitter Link","text":"<p>Actually, just see above.</p>"},{"location":"computing/transmission-chain/common-tasks/#restarting-rds","title":"Restarting RDS","text":"<p>Open Portainer, go to the swarm services, and scale radiotext to 0 and back up to 1.</p>"},{"location":"computing/transmission-chain/dante/","title":"Dante","text":""},{"location":"computing/transmission-chain/dante/#history","title":"History","text":"<p>As part of URY's Beat the Buzz campaign in the mid 2010's, URY was able to fund the switchover to digital for inter-room audio distribution.</p> <p>Prior to this, all audio was sent analogue via jack patch bays between the studios, hub, office and stores. These patches are still present for emergency and interesting use cases.</p>"},{"location":"computing/transmission-chain/dante/#network","title":"Network","text":"<p>The Dante network has been dedicated it's own IP subnet: <code>10.64.160.32/28</code>. Sadly this has become rather full.</p> <p>See Netbox for a full IP address allocation breakdown</p> <p>All devices need to be patched onto the VLAN on the main URY switch to function.</p> <p>Several PCs in the station have extra USB or PCIe network ports to be able to use Dante Controller to configure the Dante network, namely the Studio Guest PCs and the production PC (since they run windows at present).</p>"},{"location":"computing/transmission-chain/dante/#devices","title":"Devices","text":"<p>You have several Dante devices at your disposal:</p> <ul> <li> <p>Focusrite Rednet 2 per studio</p> </li> <li> <p>Focusrite Rednet 3 in stores, used as an interface between computing virtual audio routing and hardware recorders/tuners</p> </li> <li> <p>Focusrite Rednet 4 (8 channel input stagebox) in a portable rack case.</p> </li> <li> <p>Focusrite Rednet AM2 (2 channel output) in the office for monitoring AM/FM/studio</p> </li> <li> <p>Yamaha 01V96VCM mixing desk with Dante expansion card.</p> </li> <li> <p>Behringer X32 Rack with X-Dante card</p> </li> <li> <p>Studios / Production PC with Dante Via [LINK TO LICENSES]</p> </li> <li> <p>[Unknown status] Ferrofish Verto 32 (replacement for Rednet 3 above)</p> </li> </ul>"},{"location":"computing/transmission-chain/dante/#clocking-info","title":"Clocking Info","text":"<p>Because Dante sends audio digitally, all Dante devices on the network must share a syncronised clock to allow data to flow between them.</p> <p>Here are some facts to know about URY's specific setup:</p> <ul> <li> <p>All devices on the Dante network MUST operate on the same clock frequency and should all sync to a single master clock.</p> </li> <li> <p>The Yamaha 01V96VCM and Dante card only support 48KHz. This enforces that the Dante network as a whole must be 48KHz.</p> </li> <li> <p>The clock master should always be the Dante device in stores (Rednet 3) which connects to the Computing sound card/audio intereface (Focusrite Scarlett 18i20 version 1)</p> </li> <li> <p>The Dante device in stores (Rednet 3) should take it's clock source externally from either the ADAT or word clock (BNC connector) from the Computing audio interface.</p> </li> </ul> <p>Those last 2 points require some further explanation: Most Dante devices on the network input and output analogue signals. These are not referenced by the clock, signals coming in won't be <code>out of sync</code> with the clock of the Dante device. This makes them suitable for being clock slaves. This is in contrast to devices such as the Rednet 3 in stores. This device inputs and outputs ADAT digital signals over fibre-optic only. These signals are referenced to the Dante master clock, the other device (the Computing audio interface, a Scarlett 18i20) needs to send and recieve data syncronised to this same clock also, otherwise crackles, clicks and dropouts occur.</p> <p>The decision was made for the Scarlett to be the master clock source because this is synced to the software clock of the virtual audio processing. URY can operate a skeleton service without physical studios as long as the audio interface is connected to the audio server, without Dante. As such, the Scarlett clock is the most important and shouldn't be interfered with by Dante hardware issues/swaps.</p>"},{"location":"computing/transmission-chain/equipment-in-cupboard/","title":"Equipment in the Cupboard","text":"<p>The equipment rack contains an uninterruptible power supply at the bottom. This is (well, not yet, will be), monitored by MuxNet.</p>"},{"location":"computing/transmission-chain/equipment-in-cupboard/#fm","title":"FM","text":"<p>There\u2019s a computer (see below), which outputs audio on USB into an interface box (we call it the kermitbox). Then that audio goes into the transmitter via two \u00bc\u201d jack - XLRs. The FM transmitter is the top, blue one.</p> <p>Note: currently one of these XLRs is wired backwards, so it inverts the phase in the cable. To compensate, currently the software is outputting one of the channels with reversed phase.</p> <p>The feeder run then goes to the back of the cupboard, into the utility void space, out to the roof, along the cable housing and to the antenna. From the platform looking towards Derwent/Heslington, the FM antenna is the one on the right.</p>"},{"location":"computing/transmission-chain/equipment-in-cupboard/#rds","title":"RDS","text":"<p>Digital data broadcast alongside the audio feed on FM, to display on the screens of radios that support it. The data is added to the broadcast signal in the FM transmitter. It comes from the computer over the USB-Serial cable, and then through the dodgy wiring adapter. This is required, because the transmitter expects a non-standard pin layout.</p> <p>RDS has two flavours: static data (which includes the station name and ident code, assigned by Ofcom), and dynamic data (we only use the Radiotext feature for Now Playing data).</p> <p>If the dynamic data feed fails, then either the transmitter keeps radiating the last seen data, or defaults to the default static text (\u201cBy students, for students..\u201d). In either case, it\u2019ll need kicking to reset it. If the By Students, For Students bit has each word capitalised, then it\u2019s coming from our software. If only the word By is capitalised, it\u2019s the default one set in the transmitter.</p>"},{"location":"computing/transmission-chain/equipment-in-cupboard/#dab","title":"DAB","text":"<p>The DAB transmitter is below the FM one. This is connected to the internet (via the computer, see Networking below) to receive the stream from the multiplex. It is monitored by MuxNet.</p> <p>The RF from that goes into the filter (the black lump of metal with protruding bits) below the transmitter. This does magic. (It filters the RF).</p> <p>Then, it goes along the feeders, following the same route, to the DAB antenna, on the left (closer to the STEM centre). The other feeder cable is the return feed from the GPS antenna, which is the little antenna on the same pole. This is for GPS clocking.</p>"},{"location":"computing/transmission-chain/equipment-in-station/","title":"Equipment in the Station","text":""},{"location":"computing/transmission-chain/equipment-in-station/#the-hub","title":"The Hub","text":"<p>The Hub (the cupboard behind the station front door) contains some useful pieces of the broadcast chain puzzle!</p>"},{"location":"computing/transmission-chain/equipment-in-station/#networking","title":"Networking","text":"<p>Everything that requires networking in the station and stores goes via The Hub. There are multiple switches here:</p> <ul> <li> <p>URY's main switch, currently a 3COM 48 port unit. This has many VLANs accociated with different services, including a Dante VLAN/subnet.</p> </li> <li> <p>A smaller 8-port overflow Dante switch.</p> </li> <li> <p>An ITS managed HP switch for our university/internet uplink. This is the one with the fibre going into it.</p> </li> </ul> <p>Each room / area of the station / stores is labeled in the patchbay at the bottom. Count from left to right to find the port you are after. All ports around the station are labled consistently (and in numerical order) with the labels here.</p> <p>One row of the patchbay is just a passthrough to other equipment in The Hub rack.</p>"},{"location":"computing/transmission-chain/equipment-in-station/#the-selector-hardware","title":"The Selector (Hardware)","text":"<p>This is a silver 2U rack box with 4 buttons and LEDs. The buttons represent Studio 1 (Red), 2 (Blue), 3 (Jukebox) and 4 (Outside Broadcast).</p> <p>This box actually supports 8 sources internally and is remote controlled via a 9 pin D-type serial port. Instructions on the protocol are printed inside the box.</p> <p>It connects to the selector buttons via the patch bay with Cat5 cables. WARNING: Be very careful, these are ~9v lines with custom pinouts, they are not ethernet friendly and should be very carefully patched.</p> <p>It also connects via serial (and a USB converter) to the \"Selector\" Raspberry Pi in the black rack unit named \"Galifrey\".</p> <p>This box is considered the primary device in the broadcast selection chain. If it is not connected, many software-controlled source selections will not work.</p>"},{"location":"computing/transmission-chain/equipment-in-station/#dante","title":"Dante","text":"<p>In the rack is a small POE (Power Over Ethernet) device called a Dante AVIO. This device provides two channels of digital audio as input (on one XLR connector) and two channels as output, using the AES3 digital audio format.</p> <p>This is used for:</p> <ul> <li> <p>2 channels of input from the Satelite reciever. Channel 1 is typically IRN 1 (Sky news radio, hourly news bulletins and random sports updates) and channel 2 is IRN 2, which carries live coverage from events. Usually IRN1 is duplicated across both channels sent to the studios, while they are available as separate feeds via online streams or custom Dante routing.</p> </li> <li> <p>2 channels output to the Blackmagic Design ATEM Television video mixer. This is typically \"selector\" output, the soonest audio tap after the virtual audio selector to reduce video delay required to sync audio and video [LINK TO VISUALISATION]. It could also be sent direct studio feeds, but this will encure significantly less delay, but won't change with selector output going to air.</p> </li> </ul>"},{"location":"computing/transmission-chain/getting-in-cupboard/","title":"Getting into the Cupboard","text":"<p>Call Estates. Cameron is very helpful, many other people just are like \u201curgh you should be putting in planon requests to open the cupboard\u201d. The equipment rack is also locked, we keep the keys somewhere. Bet you can\u2019t guess where.</p> <p>Note that if you need to go into the cupboard you shouldn\u2019t touch the DAB transmitter without discussing with MuxNet first. Also let them know if you need to restart the PC, as the DAB feed goes through that too.</p> <p>You shouldn\u2019t need to get on to the roof, but if you do, you\u2019ll need estates to make sure the gates to the ladder are unlocked, and get security (~~campus safety~~) to de-alarm door E61479 (on the non-emergency number 01904 324444). From the toilet, with the door on your left, go to the windows and turn left, and up the metal steps</p>"},{"location":"computing/transmission-chain/library-side-software/","title":"Software Library-Side","text":"<p>(This stuff isn\u2019t on GitHub. Probably not backed up anywhere. Probably should be).</p>"},{"location":"computing/transmission-chain/library-side-software/#fm-receiver","title":"FM Receiver","text":""},{"location":"computing/transmission-chain/library-side-software/#stereotools-fm","title":"Stereotools (FM)","text":"<p>Access from within URY:</p> <pre><code>Terminal command: ssh -L 8080:localhost:8080 [ury@fmstl.ury.york.ac.uk](mailto:ury@fmstl.ury.york.ac.uk)\n\nThe password is the standard (fairly insecure) one\n\nThen visit [http://localhost:8080](http://localhost:8080) to visit the stereotools interface\n</code></pre> <p>You can change the processing settings here. I have the feeling, if and when we have to restart the receiving software, it reloads the saved settings, and doesn\u2019t save them when you change them on the user interface. There might be a save button somewhere.</p> <p>[Notes on saved configs\u2026.?]</p>"},{"location":"computing/transmission-chain/library-side-software/#networking-setup","title":"Networking Setup","text":""},{"location":"computing/transmission-chain/source-selection/","title":"Source Selection","text":"<p>URY's source selection system has changed a bit over the last 10 years or so, slowly being more computing-based.</p>"},{"location":"computing/transmission-chain/source-selection/#the-selector","title":"The Selector","text":""},{"location":"computing/transmission-chain/source-selection/#in-the-hub","title":"In the Hub","text":"<p>The physical selector was once the only part of the source selection system. Located in the Hub in magestic brushed silver is the 2009 iteration of the unit.</p> <p>It supports 8 sources. Originally these were physical inputs on the rear of the unit, but now lay unused. The box is now just a hardware controller for the Liquidsoap software stack.</p> <p>Also on the back are:</p> <ul> <li> <p>A serial DB9 (for the software control)</p> </li> <li> <p>2 RJ45 jacks for the studio selector controls in each studio</p> </li> <li> <p>A mains input</p> </li> </ul> <p>On the front:</p> <ul> <li> <p>A lock switch (Here / Studio options)</p> </li> <li> <p>3 buttons (select Studio 1 (red), Studio 2 (blue), Jukebox)</p> </li> <li> <p>(Unused) Headphone socket for listening.</p> </li> </ul> <p>The lock switch prevents the studios from being selected from inside the studios (Here mode), as an effort to prevent selections out of term time/OBIT. Historically the Chief Engineer would lock the selector during these times.</p> <p>The Firmware also allows for a software lock which takes precedence over the physical buttons. The firmware and serial comms guide is inside the box.</p>"},{"location":"computing/transmission-chain/source-selection/#in-the-studios","title":"In the Studios","text":"<p>Inside each studio there are 3 buttons, again to select Studio 1 (red), Studio 2 (blue) and Jukebox. Other sources can be selected via MyRadio/SIS.</p> <p>Also, less apparent, is some further functionality, power detection. Inside the MattchBox of each studio is a relay which is powered by the studio switched power ring. This informs the selector that the studio is powered on.</p> <p>This means that the selector will disable switching to a studio that is powered off and will switch back to Jukebox (Source 3) if power is lost during a show.</p> <p>Lastly, the bulb power of the corresponding studio button will also illuminate the On Air lights on the hall door and in-studio stalk via a mains relay in a box near each studio door.</p> <p>[MORE TECH DETAILS ABOUT THE SELECTOR BUTTONS, MATT S has pinouts for the cat5 and voltages]</p>"},{"location":"computing/transmission-chain/station-side-software/","title":"Software Station-Side","text":"<p>A lot is at https://github.com/UniversityRadioYork/jukebox.</p>"},{"location":"computing/transmission-chain/station-side-software/#audio-router","title":"Audio Router","text":"<p>Once it comes out of the studio selector, which we won\u2019t be talking about here, it can get routed to FM or DAB as a program feed. They also accept a clean jukebox feed, or a clean autonews feed (which we use out of term time). DAB also accepts a fourth \u201calternate\u201d input, that we could use one day, but nothing\u2019s really set up to actually put that source out.</p> <p>The audio feeds are piped into the streamer scripts in /usr/local/etc/liquidsoap/scripts. These are remotely controlled by the fm_sel Python script, running as the fm_sel service, and it lives in /opt/fm_sel. This exposes a HTTP port for control, and talks to the FFMPEG streamer scripts through ZMQ.</p> <p>See more details at https://github.com/UniversityRadioYork/fm_sel.</p> <p>[TODO finish]</p>"},{"location":"computing/transmission-chain/station-side-software/#streaming-fm","title":"Streaming FM","text":"<p>FM is streamed from /usr/local/etc/liquidsoap/scripts/fm_streamer_new.sh on dolby (this is run as systemctl fm_streamer). After routing the correct source, it is sent over an RTP feed (as raw audio data) to the PC in the library.</p> <p>Note: this uses a custom compiled version of FFMPEG, with extra features the default insteall doesn\u2019t have. Updating servers will happily break this, so if you need to recompile it, please see https://gist.github.com/michael-grace/d078920d15d3d5379e53bf6366e37a2d.</p>"},{"location":"computing/transmission-chain/station-side-software/#streaming-dab","title":"Streaming DAB","text":""},{"location":"computing/transmission-chain/station-side-software/#radiotext-fm","title":"Radiotext FM","text":""},{"location":"computing/transmission-chain/station-side-software/#dlsslideshow-for-dab","title":"DLS/Slideshow for DAB","text":""},{"location":"computing/transmission-chain/terminology/","title":"Terminology","text":"Term Definition Antenna the big poles on the library roof that puts the RF out to the world. There\u2019s one for FM and one for DAB. Actually, there\u2019s a tiny third one too, for the GPS system used for DAB frequency and timing synchronisation. Clocking in this context, it\u2019s about keeping the two DAB transmitters in the SFN in sync, so if you sit between them and pick up signals from both, your receiver can still decode it, and it\u2019s not a garbled mess. (Normally in URY, clocking refers to sampling audio to turn it digital (i.e. with Dante), and keeping the different devices sampling at exactly the same rate, instead of all drifting slightly off 48kHz, which causes clicking and audio dropouts) Feeders the cables connecting the transmitters and the antennas Multiplex All the stations on York SSDAB send their audio to the multiplexer (a server hosted by MuxNet), where they all get combined into one digital signal to be transmitted together. When it is received, it gets demultiplexed, so you can listen to any of the stations. MuxNet the company who installed the DAB equipment, and manage the multiplex technically RDS (Radio Data System) Digital data broadcast alongside the audio feed on FM RF Radio Frequency, the zappy zappy radio waves that your radio picks up SFN Single Frequency Network, using multiple transmitters on the same frequency to broadcast to a wider area (like we do with York SSDAB, we have one transmitter, the other is at the hospital) SSDAB Small Scale DAB (what we\u2019re part of, covers the city). The next level up is regional, such as North Yorkshire (which is where BBC Radio York is carried), and then there are three national DAB multiplexes, where BBC Radio 1, 2, etc. are found. Transmitters the equipment in the library cupboard that produce the RF"},{"location":"computing/transmission-chain/virtual-sources/","title":"Virtual Sources and Audio Routing","text":"<p>As mentioned previously, Liquidsoap is our main software that handles audio routing, selection and playout. The source code running on the audio server (currently Dolby) is here.</p> <p>Liquidsoap and other bits generate the following stereo sources:</p> <ul> <li> <p>Jukebox</p> </li> <li> <p>OB-Line (via Icecast)</p> </li> <li> <p>WebStudio (via ShittyServer)</p> </li> <li> <p>Auto news (a cron job that plays pre-mixed jingle, patches in IRN 1, selects next show source),</p> </li> <li> <p>Sine wave (of 1350 Hz of course)</p> </li> <li> <p>Off Air loop</p> </li> <li> <p>Campus playout (when it's alive)</p> </li> </ul> <p>Jackd is used as a intermediate routing layer. Each hardware input and output are there, as well as routes patching between different liquidsoap inputs and outputs.</p> <p>Liquidsoap lives in <code>/usr/local/etc/liquidsoap</code> on Dolby. The <code>scripts</code> directory has helpful scripts to start the entire virtual audio stack (<code>startAudio.sh</code>) and make various jack routing patches.</p> <p>You can see the virtual routing in jackConnect.sh.</p>"},{"location":"computing/transmission-chain/virtual-sources/#hardware-interconnects","title":"Hardware Interconnects","text":"<p>Currently URY gets audio inputs from both digital and analogue sources via a Focusrite Scarlett 18i20 (gen 1). All inputs below are stereo pairs unless otherwise noted.</p>"},{"location":"computing/transmission-chain/virtual-sources/#digital-inputs","title":"Digital Inputs","text":"<p>8 Channels via ADAT from Dante 2 more channels could be aquired via SPDIF</p> <ul> <li> <p>Studio Red</p> </li> <li> <p>Studio Blue</p> </li> <li> <p>Office (Yamaha Mixer)</p> </li> <li> <p>Satelite IRN 1 (Mono)</p> </li> <li> <p>Satelite IRN 2 (Mono)</p> </li> </ul>"},{"location":"computing/transmission-chain/virtual-sources/#analogue-inputs","title":"Analogue Inputs","text":"<p>(Upto 8 channels)</p> <ul> <li> <p>AM Receiver (Stereo because reciever does have two outputs)</p> </li> <li> <p>FM Receiver</p> </li> <li> <p>TX Compressor Output (to live streams/FM)</p> </li> </ul>"},{"location":"computing/transmission-chain/virtual-sources/#digital-outputs","title":"Digital Outputs","text":"<p>8 channels via ADAT to Dante 2 more channels could be aquired via SPDIF</p> <ul> <li> <p>Selector output (for studio \"Online\" monitoring)</p> </li> <li> <p>AM Receiver passthrough (Mono, for studio \"AM\" monitoring)</p> </li> <li> <p>FM Receiver passthrough (Mono due to lack of channels, office monitoring)</p> </li> <li> <p>OB-Line</p> </li> <li> <p>Webstudio/autonews mixed</p> </li> </ul>"},{"location":"computing/transmission-chain/virtual-sources/#analogue-outputs","title":"Analogue Outputs","text":"<p>(Upto 10 outputs)</p> <ul> <li> <p>Selector output (for Logging \"online\" and final TX compressor)</p> </li> <li> <p>AM TX output (2x mono downmix)</p> </li> <li> <p>Headphones for AM monitoring (Unconfirmed if still working)</p> </li> <li> <p>Headphones for FM monitoring (Unconfirmed if still working)</p> </li> </ul>"},{"location":"computing/transmission-chain/virtual-switching/","title":"Virtual Switching","text":"<p>The real audio switching these days is done in Liquidsoap, a software-defined audio processing system. This is ultimately found in sel.liq.</p> <p>The process of switching at its most complicated is:</p> <ol> <li>A source is selected in MyRadio via SIS (Studio Information System) API Func</li> <li>MyRadio makes a Telnet connection with a command to Selector Listener, a piece of software running on a raspberry Pi connected to the serial of the physical Selector</li> <li>The physical selector makes a decision on if the current source is allowed to be selected (based on power and lock status) and selects it.</li> <li>SelectorListener writes a database record to record its change, this changes the MyRadio API/Timelord display etc (be careful to update the configuration if the database server is changed!)</li> <li>SelectorListener makes a Telnet connection to Liquidsoap to actually perform the source selection.</li> </ol> <p>Note that if you're selecting from the selector buttons, step 1 and 2 are skipped. Also note that this therefore means that the physical selector is considered the master of the selector output, so things get very borked / unresponsive if it's not present.</p> <p>At a pinch, you can telnet liquidsoap directly and force a switch.</p> <p>One last note is that if Liquidsoap is restarted, it will switch to a default source (typically Off-Air). The MyRadio API will likely be incorrectly reporting the selector state until the physical selector is told to change to the same source that liquidsoap is outputing, before selecting back to whatever source is required.</p>"},{"location":"incidents/fw0-20240809/","title":"The Great DAB Drive Crash","text":"<p>Also known as \"fw0 Drive Crash 2024-09-08\", this page details the events of the drive crash on uryfw0 that occured on the 7th/8th of September 2024</p>"},{"location":"incidents/fw0-20240809/#timeline-of-events","title":"Timeline of Events","text":""},{"location":"incidents/fw0-20240809/#saturday-september-7th-the-day-before-the-big-dab-switch-on-show","title":"Saturday, September 7th, The Day before the big DAB switch on show.","text":"<p>11:35 AM, David Hemingway reports the web browsers in the studios were unable to connect to the internet (Proxy Server Refusing Connections), this issue goes unresolved for some time as many members of the team were either: Not in the country, not in York, actively heading back to York, or working on the open day OBs. However, by that afternoon, Ren was able to narrow down the issue to a failure to connect to the proxy server on fw0 that the studio PCs traffic is proxied through. After some discussion in slack on the viability of restarting our firewall the day of a major broadcast (foreshadowing is a literary device), Ash restarts the squid proxy service on fw0, which had crashed earlier that day, and the Studio PCs connection is restored... For now...</p>"},{"location":"incidents/fw0-20240809/#sunday-september-8th-the-day-of-the-big-dab-switch-on-show","title":"Sunday, September 8th, The Day of the big DAB switch on show.","text":"<p>10:02 AM, Joe Brearley, having went into the station early to finish planning the DAB Switch On Show, reports that the browsers in the Studio are once again unable to connect to the internet. Marks remotes into fw0 and confirms squid has once again crashed, they attempt to restart it, causing it to immediately crash. Trying again to restart it in the foreground to read the logs, it exits immediately again with this error</p> <pre><code>marks@uryfw0:~$ sudo /usr/sbin/squid --foreground -sYC\nWARNING: Cannot write log file: /var/log/squid/cache.log\n/var/log/squid/cache.log: Read-only file system\n         messages will be sent to 'stderr'.\n</code></pre> <p>Upon further investigation, Marks is able to determine that fw0's filesystem is not in a good place:</p> <pre><code>marks@uryfw0:~$ pwd\n/home/marks\nmarks@uryfw0:~$ touch test\ntouch: cannot touch 'test': Read-only file system\nmarks@uryfw0:~$ sudo fsck /\nsudo: unable to execute /sbin/fsck: Input/output error\n</code></pre> <p>By 10:25 AM, Kory had arrived on the scene, disabling the proxy on the Studio PCs to allow traffic to continue, and then confirmed that fw0 was infact not in a good place, with systemd journal rapidly spitting out disk write errors</p> <p></p> <p>A SMART Check on fw0's boot drive confirms that the drive is pretty much gone, and fw0 is essentually running off of what was cached in RAM at the time of the drive failure</p> <pre><code>$ sudo smartctl --info /dev/sda\nsmartctl 7.2 2020-12-30 r5155 [x86_64-linux-5.10.0-30-amd64] (local build)\nCopyright (C) 2002-20, Bruce Allen, Christian Franke, www.smartmontools.org\n\nShort INQUIRY response, skip product id\nA mandatory SMART command failed: exiting. To continue, add one or more '-T permissive' options.\n</code></pre> <p>By 10:43, the decision was made that a new firewall would be built ahead of the DAB Switch on show. First, Kory, having been unsuccessful in locating URY's ventoy USB, loads a Debian 11 image onto their own personal Ventoy USB and is prepared to begin rebuilding the OS by 11:27 AM. Then, Jamie remotes into fmstl to set our FM output to bedbox ahead of the impending outage, though he was initially impeded by a lack of log in credentials, he is eventually supplied them by Michael Grace. Jamie, in attempting to place our FM broadcast to bedbox, instead causes us to broadcast silence for a few minutes, but eventually manages to put it on bedbox.</p> <p>Soon after this, at 12:00 PM, Kory takes fw0 offline. Kory and Ren then begin removing drives from the turned off fw0 until the find the caddy containing the boot drive. The two are confused however, when they remove all the hard drive caddies from the server, and still hadn't found a single disk. The two then remove fw0 from the rack and open it up, revealing a concealed SATA drive inside, containing the server's OS. Removing this drive and placing fw0 back in the rack, Kory begins to place one of the spare SAS drives into a hard drive caddy in order to insert it into an open hard drive bay, or atleast they would, however, they realise URY doesn't own a screwdriver small enough to unscrew the screws in the hard drive caddy. As such, Kory and Ren make a detour to borrow YSTV's IFixit Kit (YSTV's Treasurer was consulted and approved the use).</p> <p>Once the SAS drive is mounted into the front of fw0, Kory powers it on and begins the installation process at around 12:45, with Marks remotely providing them with the necessary network configuration around 15 minutes later. After about 20 minutes, Kory and Ren come to realise that the installer has frozen up while attempting to install the Grub Bootloader to the drive, the two then decide to restart the installation. At some point in this process, Ren leaves to attend a HackSoc meeting they were late to. Once the installation freezes in the same place once again, the decision is made to SMART test the drive. Kory then has some difficulty finding a live-bootable ISO that comes preinstalled with smartctl. Around this time, Mia from YSTV arrives to offer the suggestion of running NixOS on fw0. Dissapointingly, Kory briefly considers it. The two then, luckily, discover that GParted Live contains smartctl, and, after running a test, discover that the drive passes. Now more confused, it is suggested that perhaps the reason the boot drive was originally an internal SATA drive was due to some problem with the SAS backplane, and perhaps an install onto another SATA drive connected directly to the motherboard might succeed. Without a 2.5 Inch SATA drive to hand, and time running out before DAB Turn On, Kory removes a personal SATA drive from their bag, wipes the (luckily completed) project from it, and inserts it into fw0. This time (after a failed attempt at building a new USB, and falling back to Kory's Ventoy), the installation succeeds and fw0 is back up and running.</p> <p>Next, at around 15:52, Ash and Ren arrive (Having returned from the afformentioned HackSoc meeting) to witness the successful installation, and the 4 are then able to transfer the necessary config files and scripts from Marks' Google Drive backup onto newfw0, and, by 16:17, bring the Network back online, ending the outage just 40 minutes before the DAB Switch On Show was set to go on air.</p> <p>Many things had came back online now, but by 6pm, MyRadio was still taking incredibly long to load. By 6:20, Marks diagnoses the issue as Docker DNS relying on fw0, which hadn't been configured correctly to handle this post-reinstall. Marks then installs Unbound, and MyRadio begins to work as normal once again. At this point, the Incident is delared ended.</p>"},{"location":"incidents/fw0-20240809/#monday-september-9th-final-critical-recovery-tasks","title":"Monday, September 9th, Final Critical Recovery Tasks","text":"<p>Just after midnight, Ash returns to set up the DHCP server, and then fix a misconfiguration in it in order to disable IPv6. Then, at around 1pm, Ash installs and configures Squid, before realising that IRN has removed IP Based Authentication, and, as such, the Squid proxy is no longer needed. Ash then configures the firewall script to run on boot, completing all remaining critical recorvery tasks</p> <p>===INCIDENT END===</p>"},{"location":"incidents/fw0-20240809/#highlighted-future-action-points","title":"Highlighted Future Action Points","text":"<ol> <li>Investigate why monitoring didn't alert us earlier to a drive crash</li> <li>Ensure we have up to date backups of our config files<ul> <li>Stratford and Moyles store these</li> </ul> </li> <li>Ensure break-glass accounts exits on all servers (with passwords stored on vault)</li> <li>Ensure all interested parties (e.g. Computing Officers/Computing Committee) have credentials for all necessary servers/machines</li> <li>Make sure the Ventoy (Operating System Install USB) is kept in a known location</li> <li>Ensure we have a good, useable set of screwdrivers/screwdriver bits<ul> <li>An IFixIt Kit has been passed on this years grant and will be bought when grant is received.</li> </ul> </li> </ol>"},{"location":"misc-pages/acceptableusepolicy/","title":"URY Acceptable Use Policy","text":"<p>This web page describes the acceptable use of all computer systems owned by University Radio York, located in the studios or otherwise. All members must adhere to these regulations at all times while using these computers.</p>"},{"location":"misc-pages/acceptableusepolicy/#general-use","title":"General Use","text":"<ul> <li> <p>Users will not download offensive or indecent content</p> </li> <li> <p>Users will not alter settings or configuration without seeking permission from a computing team officer</p> </li> <li> <p>Users will not copy any software (binaries or installation media) for use outside of URY or use in contravention of the licence</p> </li> <li> <p>Users will not place any software on a computer which is known to produce disruptive and or destructive behaviour</p> </li> <li> <p>Users will not place copies of music on any URY storage area with intent for this to be illegally copied or used</p> </li> </ul>"},{"location":"misc-pages/acceptableusepolicy/#use-of-digital-music","title":"Use of Digital Music","text":"<ul> <li> <p>Users may only place copies of music on any URY storage media if they hold an original licenced copy.</p> </li> <li> <p>Users may only use digital music which they have placed on the system, or digital music which has been placed on the system by a computing team officer or a music team officer</p> </li> <li> <p>All copyrighted music which is played (broadcast) from digital media must have been released in the United Kingdom</p> </li> </ul>"},{"location":"misc-pages/acceptableusepolicy/#use-of-documents-and-production-audio","title":"Use of Documents and Production Audio","text":"<ul> <li> <p>Users will save documents of importance on drive Z in an appropriate folder</p> </li> <li> <p>Users will place all other documents on F or G drive</p> </li> <li> <p>Users will place Audio files (Wave, mp3, quicktime, realmedia) on either Drive F (studio 2) or Drive G (Office)</p> </li> <li> <p>Users will remove files which they no longer need</p> </li> <li> <p>Users will place temporary documents in folders named 'temp' (on F or G drive), these documents will be removed at regular intervals by the computing team</p> </li> <li> <p>Documents will be removed without consultation if they have offensive or obscene content, are unlicenced or use excessive space to other users detriment</p> </li> </ul>"},{"location":"misc-pages/acceptableusepolicy/#hardware","title":"Hardware","text":"<ul> <li> <p>Users will treat all hardware with care and respect</p> </li> <li> <p>Faults with equipment will be reported to faults@ury.york.ac.uk</p> </li> <li> <p>Users must not attempt to fix hardware related problems if this involves exposing internal components of a computer or device</p> </li> </ul>"}]}